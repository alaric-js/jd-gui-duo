buildscript {
    repositories {
        mavenCentral()
        maven {
	    	url 'https://jitpack.io'
        }
        maven {
            url 'https://maven-eu.nuxeo.org/nexus/content/repositories/public'
        }
        maven {
            url 'https://plugins.gradle.org/m2'
        }
    }
    dependencies {
		classpath 'com.github.TheBoegl:gradle-launch4j:2.5.1'
		classpath 'de.undercouch:gradle-download-task:4.1.2'
		classpath 'com.guardsquare:proguard-gradle:7.2.0-beta2'
    }
}

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'

// Common configuration //
rootProject.version='1.6.6'
rootProject.ext.set('jdCoreVersion', '1.1.3')
sourceCompatibility = '17'
targetCompatibility = '17'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    tasks.withType(JavaCompile) {
        sourceCompatibility = '17'
        targetCompatibility = '17'
        options.compilerArgs << '-Xlint:deprecation'
        options.compilerArgs << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
    }

    configurations {
        provided.extendsFrom compileOnly
        runtime.extendsFrom implementation
    }
    
}

// 'cleanIdea' task extension //
cleanIdea.doFirst {
    delete project.name + '.iws'
    delete 'out'
    followSymlinks = true
}

// All in one JAR file //
subprojects.each { subproject ->
    evaluationDependsOn(subproject.path)
}

jar {
    dependsOn 'downloadAndUnzipFile'
    dependsOn subprojects.tasks['jar']

    // Add SPI directory
    def tmpSpiDir = file('build/tmp/spi')
    from tmpSpiDir
    // Add dependencies
    def deps = []
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
        deps += subproject.configurations.runtime - subproject.configurations.provided
    }
    subprojects.each { subproject ->
        deps -= subproject.jar.archivePath
    }
    deps = deps.unique().collect { it.isDirectory() ? it : zipTree(it) }
    from deps

    manifest {
        attributes 'Main-Class': 'org.jd.gui.App',
                'SplashScreen-Image': 'org/jd/gui/images/jd_icon_128.png',
                'JD-GUI-Version': project.version,
                'JD-Core-Version': project.jdCoreVersion
    }
    exclude 'META-INF/licenses/**', 'META-INF/maven/**', 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.RSA'
    exclude '**/ErrorStrip_*.properties', '**/RSyntaxTextArea_*.properties', '**/RTextArea_*.properties'
    exclude '**/FocusableTip_*.properties', '**/RSyntaxTextArea_License.txt'
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    doFirst {
        // Create SPI directory
        tmpSpiDir.deleteDir()
        def tmpSpiServicesDir = file(tmpSpiDir.path + '/META-INF/services')
        tmpSpiServicesDir.mkdirs()
        // Copy and merge SPI config files
        subprojects.each { subproject ->
            def servicesDir = file(subproject.sourceSets.main.output.resourcesDir.path + '/META-INF/services')
            if (servicesDir.exists()) {
                servicesDir.eachFile { serviceFile ->
                    def target = file(tmpSpiServicesDir.path + '/' + serviceFile.name)
                    target << serviceFile.text
                }
            }
        }
    }
}

// Java executable wrapper for Windows //
task downloadZipFile(type: Download) {
    src 'https://cdn.azul.com/zulu/bin/zulu17.30.15-ca-jre17.0.1-win_x64.zip'
    dest 'build/zulu17.30.15-ca-jre17.0.1-win_x64.zip'
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into buildDir
}

// Minify JAR file //
task proguard(type: proguard.gradle.ProGuardTask, dependsOn: 'jar') {
    configuration 'src/proguard/resources/proguard.config.txt'
    injars jar.archivePath
    outjars 'build/libs/' + project.name + '-' + project.version + '-min.jar'
    libraryjars System.getProperty('java.home') + '/lib/rt.jar'
    libraryjars System.getProperty('java.home') + '/jmods/'
}

createExe {
  dependsOn 'downloadAndUnzipFile'
  dependsOn 'proguard'
  mainClassName = 'org.jd.gui.App'
  icon = "${projectDir}/src/launch4j/resources/images/jd-gui.ico"
  bundledJre64Bit = 'true'
  bundledJrePath = 'zulu17.30.15-ca-jre17.0.1-win_x64'
}

// Distributions for OSX and Windows //
distributions {
    windows.contents {
        into('zulu17.30.15-ca-jre17.0.1-win_x64/') {
            from 'build/zulu17.30.15-ca-jre17.0.1-win_x64'
        } 
        from 'build/launch4j/jd-gui-bundle.exe'
        from 'LICENSE', 'NOTICE', 'README.md'
        from jar
    }

    installWindowsDist.dependsOn createExe
    windowsDistZip.dependsOn createExe
}

publishing {
    publications {
        myDistribution(MavenPublication) {
            groupId = 'com.github.nbauma109'
            artifact windowsDistZip
        }
    }
}
